# Security Scanning and Dependency Auditing
# Copy this file to .github/workflows/security.yml

name: Security

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Mondays at 2 AM UTC
  push:
    branches: [ main ]
    paths:
      - '**/requirements*.txt'
      - '**/pyproject.toml'
      - '**/setup.py'
      - '**/setup.cfg'
  pull_request:
    paths:
      - '**/requirements*.txt'
      - '**/pyproject.toml'
      - '**/setup.py'
      - '**/setup.cfg'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Code security scanning
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Dependency vulnerability scanning
  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -e .
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check  # This will show human-readable output and may fail
      continue-on-error: true
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit --format=cyclonedx-json --output=sbom.json
      continue-on-error: true
    
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json
          sbom.json

  # Bandit security linting (already in pre-commit, but run separately for reporting)
  bandit:
    name: Bandit Security Linting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install bandit
      run: pip install bandit[toml]
    
    - name: Run Bandit scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt  # Human-readable output
      continue-on-error: true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  # Secrets scanning
  truffleHog:
    name: TruffleHog Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # SLSA provenance generation
  provenance:
    name: Generate SLSA Provenance
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Build package
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Generate SLSA provenance
      uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.7.0
      with:
        base64-subjects: |
          $(find dist/ -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec sha256sum {} \; | base64 -w0)

  # Container security scanning (if Dockerfile exists)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t pno-physics-bench:latest .
        else
          echo "No Dockerfile found, skipping container scan"
          exit 0
        fi
    
    - name: Run Trivy vulnerability scanner
      if: hashFiles('Dockerfile') != ''
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pno-physics-bench:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      if: hashFiles('Dockerfile') != ''
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses licensecheck
        pip install -e .
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md
        licensecheck  # Checks for license compatibility issues
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: |
          licenses.json
          licenses.md

  # Create security issue if vulnerabilities found
  create-security-issue:
    name: Create Security Issue
    runs-on: ubuntu-latest
    needs: [dependency-check, bandit, codeql]
    if: failure() && github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
    
    - name: Create issue
      uses: actions/github-script@v6
      with:
        script: |
          const title = `ðŸ”’ Security Scan Failure - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Security Scan Alert
          
          The scheduled security scan has detected issues that require attention.
          
          **Scan Date:** ${new Date().toISOString()}
          **Workflow:** ${context.workflow}
          **Run ID:** ${context.runId}
          
          ### Next Steps
          1. Review the failed workflow: [View Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
          2. Download security reports from the workflow artifacts
          3. Address any high-severity vulnerabilities immediately
          4. Update dependencies if necessary
          5. Close this issue once all issues are resolved
          
          ### Artifacts Available
          - Security reports (safety, pip-audit)
          - Bandit security linting report
          - CodeQL analysis results
          - License compliance report
          
          cc: @security-team
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'high-priority', 'automated']
          });

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-check, bandit, truffleHog, license-check]
    if: always()
    steps:
    - name: Security scan summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Bandit | ${{ needs.bandit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| TruffleHog | ${{ needs.truffleHog.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY