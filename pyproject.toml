[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pno-physics-bench"
version = "0.1.0"
description = "Training & benchmark suite for Probabilistic Neural Operators (PNO) that quantify uncertainty in PDE surrogates"
authors = [{name = "Daniel Schmidt", email = "daniel@terragonlabs.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
]
keywords = [
    "neural-operators",
    "uncertainty-quantification", 
    "pde-solvers",
    "physics-informed",
    "probabilistic-modeling",
    "scientific-computing"
]
dependencies = [
    "torch>=2.0.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "h5py>=3.6.0",
    "tqdm>=4.62.0",
    "omegaconf>=2.1.0",
    "hydra-core>=1.1.0",
    "wandb>=0.12.0",
    "tensorboard>=2.8.0",
]

[project.optional-dependencies]
jax = [
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "optax>=0.1.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.17.0",
    "sphinx>=4.5.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0"
]
benchmark = [
    "memory-profiler>=0.60.0",
    "py-spy>=0.3.0",
    "pytest-benchmark>=4.0.0"
]
all = [
    "pno-physics-bench[jax,dev,benchmark]"
]

[project.urls]
Homepage = "https://github.com/yourusername/pno-physics-bench"
Repository = "https://github.com/yourusername/pno-physics-bench.git"
Documentation = "https://pno-physics-bench.readthedocs.io"
"Bug Reports" = "https://github.com/yourusername/pno-physics-bench/issues"

[project.scripts]
pno-train = "pno_physics_bench.cli:train"
pno-benchmark = "pno_physics_bench.cli:benchmark"
pno-eval = "pno_physics_bench.cli:evaluate"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
pno_physics_bench = ["py.typed", "*.yaml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "docs/", "build/", "dist/"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "numpy.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "h5py.*",
    "wandb.*",
    "omegaconf.*",
    "hydra.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = """
    --strict-markers
    --strict-config
    --cov=src/pno_physics_bench
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
"""
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU"
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod"
]